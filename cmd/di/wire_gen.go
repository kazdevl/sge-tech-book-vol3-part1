// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"game-server-example/cmd/di/provider"
	"game-server-example/config"
	"game-server-example/pkg/handler"
	"game-server-example/pkg/handler/api"
	"game-server-example/pkg/handler/middleware"
	"game-server-example/pkg/infra/mysql"
	"game-server-example/pkg/infra/mysql/cachedb"
	"game-server-example/pkg/infra/mysql/cacherepository"
	"game-server-example/pkg/infra/mysql/integrationrepository"
	"game-server-example/pkg/infra/mysql/repository"
	"game-server-example/pkg/service"
	"game-server-example/pkg/usecase"
)

// Injectors from wire.go:

func Inject() (*provider.GameServer, func(), error) {
	configMysql, err := config.NewMysqlConfig()
	if err != nil {
		return nil, nil, err
	}
	applicationDB, cleanup, err := mysql.NewDB(configMysql)
	if err != nil {
		return nil, nil, err
	}
	monsterEntityRepository := repository.NewMonsterEntityRepository(applicationDB)
	db := mysql.RetrieveSqlxDB(applicationDB)
	coinEntityRepository := repository.NewCoinEntityRepository(applicationDB)
	itemEntityRepository := repository.NewItemEntityRepository(applicationDB)
	v := repository.NewModelBulkExecutorMap(coinEntityRepository, itemEntityRepository, monsterEntityRepository)
	cacheDB := cachedb.NewCacheDB(db, v)
	monsterEntityCacheRepository := cacherepository.NewMonsterEntityCacheRepository(cacheDB)
	bool2 := config.IsEnableCacheRepository()
	monsterIntegrationRepository := integrationrepository.NewMonsterIntegrationRepository(monsterEntityRepository, monsterEntityCacheRepository, bool2)
	itemEntityCacheRepository := cacherepository.NewItemEntityCacheRepository(cacheDB)
	itemIntegrationRepository := integrationrepository.NewItemIntegrationRepository(itemEntityRepository, itemEntityCacheRepository, bool2)
	coinEntityCacheRepository := cacherepository.NewCoinEntityCacheRepository(cacheDB)
	coinIntegrationRepository := integrationrepository.NewCoinIntegrationRepository(coinEntityRepository, coinEntityCacheRepository, bool2)
	monsterEnhanceService := service.NewMonsterEnhanceService(monsterIntegrationRepository, itemIntegrationRepository, coinIntegrationRepository)
	checkPerformanceService := service.NewCheckPerformanceService(monsterIntegrationRepository, itemIntegrationRepository)
	monsterUsecase := usecase.NewMonsterUsecase(monsterEnhanceService, checkPerformanceService)
	monsterHandler := api.NewMonsterHandler(monsterUsecase)
	uuidGenerator := repository.NewUUIDGenerator()
	userRegisterService := service.NewUserRegisterService(uuidGenerator, monsterIntegrationRepository, itemIntegrationRepository, coinIntegrationRepository)
	userGetDataService := service.NewUserGetDataService(monsterIntegrationRepository, itemIntegrationRepository, coinIntegrationRepository)
	userUsecase := usecase.NewUserUsecase(userRegisterService, userGetDataService)
	userHandler := api.NewUserHandler(userUsecase)
	baseHandler := handler.NewBaseHandler(monsterHandler, userHandler)
	transactionMiddleware := middleware.NewTransactionMiddleware(applicationDB, cacheDB, bool2)
	router := handler.NewRouter(baseHandler, transactionMiddleware)
	gameServer := provider.NewGameServer(router)
	return gameServer, func() {
		cleanup()
	}, nil
}
