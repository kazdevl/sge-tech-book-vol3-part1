// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o UserCoinSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(userCoinColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			userCoinAllColumns,
			userCoinColumnsWithDefault,
			userCoinColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO `user_coin` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(userCoinType, userCoinMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to insert into user_coin")
	}

	return nil
}

// UserCoin is an object representing the database table.
type UserCoin struct { // ユーザID
	UserID int64 `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// 個数
	Num int64 `db:"num" boil:"num" json:"num" toml:"num" yaml:"num"`

	R *userCoinR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userCoinL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserCoinColumns = struct {
	UserID string
	Num    string
}{
	UserID: "user_id",
	Num:    "num",
}

var UserCoinTableColumns = struct {
	UserID string
	Num    string
}{
	UserID: "user_coin.user_id",
	Num:    "user_coin.num",
}

// Generated where

var UserCoinWhere = struct {
	UserID whereHelperint64
	Num    whereHelperint64
}{
	UserID: whereHelperint64{field: "`user_coin`.`user_id`"},
	Num:    whereHelperint64{field: "`user_coin`.`num`"},
}

// UserCoinRels is where relationship names are stored.
var UserCoinRels = struct {
}{}

// userCoinR is where relationships are stored.
type userCoinR struct {
}

// NewStruct creates a new relationship struct
func (*userCoinR) NewStruct() *userCoinR {
	return &userCoinR{}
}

// userCoinL is where Load methods for each relationship are stored.
type userCoinL struct{}

var (
	userCoinAllColumns            = []string{"user_id", "num"}
	userCoinColumnsWithoutDefault = []string{"user_id", "num"}
	userCoinColumnsWithDefault    = []string{}
	userCoinPrimaryKeyColumns     = []string{"user_id"}
	userCoinGeneratedColumns      = []string{}
)

type (
	// UserCoinSlice is an alias for a slice of pointers to UserCoin.
	// This should almost always be used instead of []UserCoin.
	UserCoinSlice []*UserCoin
	// UserCoinHook is the signature for custom UserCoin hook methods
	UserCoinHook func(context.Context, boil.ContextExecutor, *UserCoin) error

	userCoinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userCoinType                 = reflect.TypeOf(&UserCoin{})
	userCoinMapping              = queries.MakeStructMapping(userCoinType)
	userCoinPrimaryKeyMapping, _ = queries.BindMapping(userCoinType, userCoinMapping, userCoinPrimaryKeyColumns)
	userCoinInsertCacheMut       sync.RWMutex
	userCoinInsertCache          = make(map[string]insertCache)
	userCoinUpdateCacheMut       sync.RWMutex
	userCoinUpdateCache          = make(map[string]updateCache)
	userCoinUpsertCacheMut       sync.RWMutex
	userCoinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userCoinAfterSelectHooks []UserCoinHook

var userCoinBeforeInsertHooks []UserCoinHook
var userCoinAfterInsertHooks []UserCoinHook

var userCoinBeforeUpdateHooks []UserCoinHook
var userCoinAfterUpdateHooks []UserCoinHook

var userCoinBeforeDeleteHooks []UserCoinHook
var userCoinAfterDeleteHooks []UserCoinHook

var userCoinBeforeUpsertHooks []UserCoinHook
var userCoinAfterUpsertHooks []UserCoinHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserCoin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserCoin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserCoin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserCoin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserCoin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserCoin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserCoin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserCoin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserCoin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userCoinAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserCoinHook registers your hook function for all future operations.
func AddUserCoinHook(hookPoint boil.HookPoint, userCoinHook UserCoinHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userCoinAfterSelectHooks = append(userCoinAfterSelectHooks, userCoinHook)
	case boil.BeforeInsertHook:
		userCoinBeforeInsertHooks = append(userCoinBeforeInsertHooks, userCoinHook)
	case boil.AfterInsertHook:
		userCoinAfterInsertHooks = append(userCoinAfterInsertHooks, userCoinHook)
	case boil.BeforeUpdateHook:
		userCoinBeforeUpdateHooks = append(userCoinBeforeUpdateHooks, userCoinHook)
	case boil.AfterUpdateHook:
		userCoinAfterUpdateHooks = append(userCoinAfterUpdateHooks, userCoinHook)
	case boil.BeforeDeleteHook:
		userCoinBeforeDeleteHooks = append(userCoinBeforeDeleteHooks, userCoinHook)
	case boil.AfterDeleteHook:
		userCoinAfterDeleteHooks = append(userCoinAfterDeleteHooks, userCoinHook)
	case boil.BeforeUpsertHook:
		userCoinBeforeUpsertHooks = append(userCoinBeforeUpsertHooks, userCoinHook)
	case boil.AfterUpsertHook:
		userCoinAfterUpsertHooks = append(userCoinAfterUpsertHooks, userCoinHook)
	}
}

// One returns a single userCoin record from the query.
func (q userCoinQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserCoin, error) {
	o := &UserCoin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodel: failed to execute a one query for user_coin")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserCoin records from the query.
func (q userCoinQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserCoinSlice, error) {
	var o []*UserCoin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datamodel: failed to assign all query results to UserCoin slice")
	}

	if len(userCoinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserCoin records in the query.
func (q userCoinQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to count user_coin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userCoinQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datamodel: failed to check if user_coin exists")
	}

	return count > 0, nil
}

// UserCoins retrieves all the records using an executor.
func UserCoins(mods ...qm.QueryMod) userCoinQuery {
	mods = append(mods, qm.From("`user_coin`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_coin`.*"})
	}

	return userCoinQuery{q}
}

// FindUserCoin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserCoin(ctx context.Context, exec boil.ContextExecutor, userID int64, selectCols ...string) (*UserCoin, error) {
	userCoinObj := &UserCoin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_coin` where `user_id`=?", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, userCoinObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodel: unable to select from user_coin")
	}

	if err = userCoinObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userCoinObj, err
	}

	return userCoinObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserCoin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datamodel: no user_coin provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userCoinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userCoinInsertCacheMut.RLock()
	cache, cached := userCoinInsertCache[key]
	userCoinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userCoinAllColumns,
			userCoinColumnsWithDefault,
			userCoinColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userCoinType, userCoinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userCoinType, userCoinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_coin` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_coin` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_coin` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userCoinPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "datamodel: unable to insert into user_coin")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to populate default values for user_coin")
	}

CacheNoHooks:
	if !cached {
		userCoinInsertCacheMut.Lock()
		userCoinInsertCache[key] = cache
		userCoinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserCoin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserCoin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userCoinUpdateCacheMut.RLock()
	cache, cached := userCoinUpdateCache[key]
	userCoinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userCoinAllColumns,
			userCoinPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datamodel: unable to update user_coin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_coin` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userCoinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userCoinType, userCoinMapping, append(wl, userCoinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update user_coin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by update for user_coin")
	}

	if !cached {
		userCoinUpdateCacheMut.Lock()
		userCoinUpdateCache[key] = cache
		userCoinUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userCoinQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update all for user_coin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to retrieve rows affected for user_coin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserCoinSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datamodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userCoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_coin` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userCoinPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update all in userCoin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to retrieve rows affected all in update all userCoin")
	}
	return rowsAff, nil
}

// Delete deletes a single UserCoin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserCoin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datamodel: no UserCoin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userCoinPrimaryKeyMapping)
	sql := "DELETE FROM `user_coin` WHERE `user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete from user_coin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by delete for user_coin")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userCoinQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datamodel: no userCoinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete all from user_coin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by deleteall for user_coin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserCoinSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userCoinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userCoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_coin` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userCoinPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete all from userCoin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by deleteall for user_coin")
	}

	if len(userCoinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserCoin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserCoin(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserCoinSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserCoinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userCoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_coin`.* FROM `user_coin` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userCoinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to reload all in UserCoinSlice")
	}

	*o = slice

	return nil
}

// UserCoinExists checks if the UserCoin row exists.
func UserCoinExists(ctx context.Context, exec boil.ContextExecutor, userID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_coin` where `user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datamodel: unable to check if user_coin exists")
	}

	return exists, nil
}

// Exists checks if the UserCoin row exists.
func (o *UserCoin) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserCoinExists(ctx, exec, o.UserID)
}

var mySQLUserCoinUniqueColumns = []string{
	"user_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserCoin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datamodel: no user_coin provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userCoinColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserCoinUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userCoinUpsertCacheMut.RLock()
	cache, cached := userCoinUpsertCache[key]
	userCoinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userCoinAllColumns,
			userCoinColumnsWithDefault,
			userCoinColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userCoinAllColumns,
			userCoinPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("datamodel: unable to upsert user_coin, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_coin`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_coin` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userCoinType, userCoinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userCoinType, userCoinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "datamodel: unable to upsert for user_coin")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userCoinType, userCoinMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to retrieve unique values for user_coin")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to populate default values for user_coin")
	}

CacheNoHooks:
	if !cached {
		userCoinUpsertCacheMut.Lock()
		userCoinUpsertCache[key] = cache
		userCoinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
