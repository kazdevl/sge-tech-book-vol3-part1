// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o UserMonsterSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(userMonsterColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			userMonsterAllColumns,
			userMonsterColumnsWithDefault,
			userMonsterColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO `user_monster` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(userMonsterType, userMonsterMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to insert into user_monster")
	}

	return nil
}

// UserMonster is an object representing the database table.
type UserMonster struct { // ユーザID
	UserID int64 `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// モンスターID
	MonsterID int64 `db:"monster_id" boil:"monster_id" json:"monster_id" toml:"monster_id" yaml:"monster_id"`
	// 経験値
	Exp int64 `db:"exp" boil:"exp" json:"exp" toml:"exp" yaml:"exp"`

	R *userMonsterR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userMonsterL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserMonsterColumns = struct {
	UserID    string
	MonsterID string
	Exp       string
}{
	UserID:    "user_id",
	MonsterID: "monster_id",
	Exp:       "exp",
}

var UserMonsterTableColumns = struct {
	UserID    string
	MonsterID string
	Exp       string
}{
	UserID:    "user_monster.user_id",
	MonsterID: "user_monster.monster_id",
	Exp:       "user_monster.exp",
}

// Generated where

var UserMonsterWhere = struct {
	UserID    whereHelperint64
	MonsterID whereHelperint64
	Exp       whereHelperint64
}{
	UserID:    whereHelperint64{field: "`user_monster`.`user_id`"},
	MonsterID: whereHelperint64{field: "`user_monster`.`monster_id`"},
	Exp:       whereHelperint64{field: "`user_monster`.`exp`"},
}

// UserMonsterRels is where relationship names are stored.
var UserMonsterRels = struct {
}{}

// userMonsterR is where relationships are stored.
type userMonsterR struct {
}

// NewStruct creates a new relationship struct
func (*userMonsterR) NewStruct() *userMonsterR {
	return &userMonsterR{}
}

// userMonsterL is where Load methods for each relationship are stored.
type userMonsterL struct{}

var (
	userMonsterAllColumns            = []string{"user_id", "monster_id", "exp"}
	userMonsterColumnsWithoutDefault = []string{"user_id", "monster_id", "exp"}
	userMonsterColumnsWithDefault    = []string{}
	userMonsterPrimaryKeyColumns     = []string{"user_id", "monster_id"}
	userMonsterGeneratedColumns      = []string{}
)

type (
	// UserMonsterSlice is an alias for a slice of pointers to UserMonster.
	// This should almost always be used instead of []UserMonster.
	UserMonsterSlice []*UserMonster
	// UserMonsterHook is the signature for custom UserMonster hook methods
	UserMonsterHook func(context.Context, boil.ContextExecutor, *UserMonster) error

	userMonsterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userMonsterType                 = reflect.TypeOf(&UserMonster{})
	userMonsterMapping              = queries.MakeStructMapping(userMonsterType)
	userMonsterPrimaryKeyMapping, _ = queries.BindMapping(userMonsterType, userMonsterMapping, userMonsterPrimaryKeyColumns)
	userMonsterInsertCacheMut       sync.RWMutex
	userMonsterInsertCache          = make(map[string]insertCache)
	userMonsterUpdateCacheMut       sync.RWMutex
	userMonsterUpdateCache          = make(map[string]updateCache)
	userMonsterUpsertCacheMut       sync.RWMutex
	userMonsterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userMonsterAfterSelectHooks []UserMonsterHook

var userMonsterBeforeInsertHooks []UserMonsterHook
var userMonsterAfterInsertHooks []UserMonsterHook

var userMonsterBeforeUpdateHooks []UserMonsterHook
var userMonsterAfterUpdateHooks []UserMonsterHook

var userMonsterBeforeDeleteHooks []UserMonsterHook
var userMonsterAfterDeleteHooks []UserMonsterHook

var userMonsterBeforeUpsertHooks []UserMonsterHook
var userMonsterAfterUpsertHooks []UserMonsterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserMonster) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserMonster) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserMonster) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserMonster) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserMonster) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserMonster) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserMonster) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserMonster) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserMonster) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMonsterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserMonsterHook registers your hook function for all future operations.
func AddUserMonsterHook(hookPoint boil.HookPoint, userMonsterHook UserMonsterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userMonsterAfterSelectHooks = append(userMonsterAfterSelectHooks, userMonsterHook)
	case boil.BeforeInsertHook:
		userMonsterBeforeInsertHooks = append(userMonsterBeforeInsertHooks, userMonsterHook)
	case boil.AfterInsertHook:
		userMonsterAfterInsertHooks = append(userMonsterAfterInsertHooks, userMonsterHook)
	case boil.BeforeUpdateHook:
		userMonsterBeforeUpdateHooks = append(userMonsterBeforeUpdateHooks, userMonsterHook)
	case boil.AfterUpdateHook:
		userMonsterAfterUpdateHooks = append(userMonsterAfterUpdateHooks, userMonsterHook)
	case boil.BeforeDeleteHook:
		userMonsterBeforeDeleteHooks = append(userMonsterBeforeDeleteHooks, userMonsterHook)
	case boil.AfterDeleteHook:
		userMonsterAfterDeleteHooks = append(userMonsterAfterDeleteHooks, userMonsterHook)
	case boil.BeforeUpsertHook:
		userMonsterBeforeUpsertHooks = append(userMonsterBeforeUpsertHooks, userMonsterHook)
	case boil.AfterUpsertHook:
		userMonsterAfterUpsertHooks = append(userMonsterAfterUpsertHooks, userMonsterHook)
	}
}

// One returns a single userMonster record from the query.
func (q userMonsterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserMonster, error) {
	o := &UserMonster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodel: failed to execute a one query for user_monster")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserMonster records from the query.
func (q userMonsterQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserMonsterSlice, error) {
	var o []*UserMonster

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datamodel: failed to assign all query results to UserMonster slice")
	}

	if len(userMonsterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserMonster records in the query.
func (q userMonsterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to count user_monster rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userMonsterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datamodel: failed to check if user_monster exists")
	}

	return count > 0, nil
}

// UserMonsters retrieves all the records using an executor.
func UserMonsters(mods ...qm.QueryMod) userMonsterQuery {
	mods = append(mods, qm.From("`user_monster`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_monster`.*"})
	}

	return userMonsterQuery{q}
}

// FindUserMonster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserMonster(ctx context.Context, exec boil.ContextExecutor, userID int64, monsterID int64, selectCols ...string) (*UserMonster, error) {
	userMonsterObj := &UserMonster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_monster` where `user_id`=? AND `monster_id`=?", sel,
	)

	q := queries.Raw(query, userID, monsterID)

	err := q.Bind(ctx, exec, userMonsterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodel: unable to select from user_monster")
	}

	if err = userMonsterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userMonsterObj, err
	}

	return userMonsterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserMonster) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datamodel: no user_monster provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userMonsterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userMonsterInsertCacheMut.RLock()
	cache, cached := userMonsterInsertCache[key]
	userMonsterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userMonsterAllColumns,
			userMonsterColumnsWithDefault,
			userMonsterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userMonsterType, userMonsterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userMonsterType, userMonsterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_monster` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_monster` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_monster` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userMonsterPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "datamodel: unable to insert into user_monster")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.MonsterID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to populate default values for user_monster")
	}

CacheNoHooks:
	if !cached {
		userMonsterInsertCacheMut.Lock()
		userMonsterInsertCache[key] = cache
		userMonsterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserMonster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserMonster) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userMonsterUpdateCacheMut.RLock()
	cache, cached := userMonsterUpdateCache[key]
	userMonsterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userMonsterAllColumns,
			userMonsterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datamodel: unable to update user_monster, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_monster` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userMonsterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userMonsterType, userMonsterMapping, append(wl, userMonsterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update user_monster row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by update for user_monster")
	}

	if !cached {
		userMonsterUpdateCacheMut.Lock()
		userMonsterUpdateCache[key] = cache
		userMonsterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userMonsterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update all for user_monster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to retrieve rows affected for user_monster")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserMonsterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datamodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMonsterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_monster` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userMonsterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update all in userMonster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to retrieve rows affected all in update all userMonster")
	}
	return rowsAff, nil
}

// Delete deletes a single UserMonster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserMonster) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datamodel: no UserMonster provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userMonsterPrimaryKeyMapping)
	sql := "DELETE FROM `user_monster` WHERE `user_id`=? AND `monster_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete from user_monster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by delete for user_monster")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userMonsterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datamodel: no userMonsterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete all from user_monster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by deleteall for user_monster")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserMonsterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userMonsterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMonsterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_monster` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userMonsterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete all from userMonster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by deleteall for user_monster")
	}

	if len(userMonsterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserMonster) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserMonster(ctx, exec, o.UserID, o.MonsterID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserMonsterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserMonsterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMonsterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_monster`.* FROM `user_monster` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userMonsterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to reload all in UserMonsterSlice")
	}

	*o = slice

	return nil
}

// UserMonsterExists checks if the UserMonster row exists.
func UserMonsterExists(ctx context.Context, exec boil.ContextExecutor, userID int64, monsterID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_monster` where `user_id`=? AND `monster_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, monsterID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, monsterID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datamodel: unable to check if user_monster exists")
	}

	return exists, nil
}

// Exists checks if the UserMonster row exists.
func (o *UserMonster) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserMonsterExists(ctx, exec, o.UserID, o.MonsterID)
}

var mySQLUserMonsterUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserMonster) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datamodel: no user_monster provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userMonsterColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserMonsterUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userMonsterUpsertCacheMut.RLock()
	cache, cached := userMonsterUpsertCache[key]
	userMonsterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userMonsterAllColumns,
			userMonsterColumnsWithDefault,
			userMonsterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userMonsterAllColumns,
			userMonsterPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("datamodel: unable to upsert user_monster, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_monster`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_monster` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userMonsterType, userMonsterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userMonsterType, userMonsterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "datamodel: unable to upsert for user_monster")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userMonsterType, userMonsterMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to retrieve unique values for user_monster")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to populate default values for user_monster")
	}

CacheNoHooks:
	if !cached {
		userMonsterUpsertCacheMut.Lock()
		userMonsterUpsertCache[key] = cache
		userMonsterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
